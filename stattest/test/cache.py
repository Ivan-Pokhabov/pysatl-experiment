import csv
import os

from stattest.core.store import FastJsonStoreService


class MonteCarloCacheService(FastJsonStoreService):

    def __init__(self, filename='cache.json', separator=':', csv_delimiter=';', dir_path='test_distribution'):
        super().__init__(filename, separator)
        self.csv_delimiter = csv_delimiter
        self.dir_path = dir_path

        if not os.path.exists(dir_path):
            os.makedirs(dir_path)

    def __build_file_path(self, test_code: str, size: int):
        file_name = test_code + '_' + str(size) + '.csv'
        return os.path.join(self.dir_path, file_name)

    def put_distribution(self, test_code: str, size: int, data: []):
        """
        Save distribution to csv file. Name generated by {test_code}_{size}.scv

        :param test_code: statistic test code
        :param size: sample size
        :param data: distribution data to save
        """

        file_path = self.__build_file_path(test_code, size)
        with open(file_path, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile, delimiter=self.csv_delimiter, quoting=csv.QUOTE_NONNUMERIC)
            writer.writerow(data)

    def get_distribution(self, test_code: str, size: int) -> [float]:
        """
        Return distribution cached value or None.

        :param test_code: statistic test code
        :param size: sample size
        """

        file_path = self.__build_file_path(test_code, size)
        if os.path.exists(file_path):
            with open(file_path, newline='') as f:
                reader = csv.reader(f, delimiter=self.csv_delimiter, quoting=csv.QUOTE_NONNUMERIC)
                return list(reader)[0]
        else:
            return None
